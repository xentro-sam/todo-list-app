{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","createTodo","id","uuidv4","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","onClick","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89b733d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { task: \"\" };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\n        this.setState({ task: \"\" });\n    }\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">Add New Todo</label>\n                <input type=\"text\" placeholder=\"New Todo\" id=\"task\" name=\"task\" value={this.state.task} onChange={this.handleChange} />\n                <button>Add Todo</button>\n            </form>\n        );\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        };\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n    handleRemove() {\n        this.props.removeTodo(this.props.id);\n    }\n    toggleForm() {\n        this.setState({ isEditing: !this.state.isEditing });\n    }\n    handleUpdate(evt) {\n        evt.preventDefault();\n        //take new task data and pass up to parent\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({ isEditing: false });\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleToggle(evt) {\n        this.props.toggleTodo(this.props.id);\n    }\n    render() {\n        let result;\n        if (this.state.isEditing) {\n            result = (\n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input type=\"text\" value={this.state.task} name=\"task\" onChange={this.handleChange} />\n                        <button>Save</button>\n                    </form>\n                </div>\n            );\n        }\n        else {\n            result = (\n                <div className=\"Todo\">\n                    <li className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"} onClick={this.handleToggle}>{this.props.task}</li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}>\n                            <i className='fas fa-pen' />\n                        </button>\n                        <button onClick={this.handleRemove}>\n                            <i className='fas fa-trash' />\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n        return result;\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { todos: [] };\n        this.create = this.create.bind(this);\n        this.remove = this.remove.bind(this);\n        this.update = this.update.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n    create(newTodo) {\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        });\n    }\n    remove(id) {\n        this.setState({\n            todos: this.state.todos.filter(t => t.id !== id)\n        });\n    }\n    update(id, updatedTask) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return { ...todo, task: updatedTask }\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n    toggleCompletion(id) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return { ...todo, completed: !todo.completed }\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n    render() {\n        const todos = this.state.todos.map(todo => {\n            return <Todo key={todo.id} id={todo.id} task={todo.task} completed={todo.completed} removeTodo={this.remove} updateTodo={this.update} toggleTodo={this.toggleCompletion} />\n        });\n        return (\n            <div className=\"TodoList\">\n                <h1>\n                    Todo List! <span>Get items done one at a time</span>\n                </h1>\n                <ul>{todos}</ul>\n                <NewTodoForm createTodo={this.create} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <TodoList />\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}